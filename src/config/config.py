##
# @file config.py
# @author Ваш Никнейм
# @brief Управление конфигурацией и секретами приложения.
# @details Этот модуль отвечает за централизованную загрузку, валидацию и предоставление
# доступа к настройкам приложения, таким как API-токены, с использованием
# переменных окружения из `.env` файла. Он использует библиотеку Pydantic
# для обеспечения надежности и типизации настроек.

from pydantic import SecretStr
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    ##
    # @class Settings
    # @brief Основной класс для настроек приложения, основанный на pydantic_settings.BaseSettings.
    # @details Этот класс автоматически считывает переменные из файла окружения,
    # валидирует их типы и предоставляет удобный и безопасный доступ к ним.
    # Если обязательная переменная отсутствует в .env файле, приложение не запустится
    # и выдаст ошибку, что предотвращает сбои в работе из-за неверной конфигурации.
    
    BOT_TOKEN: SecretStr
    ## @var BOT_TOKEN
    # @brief Секретный токен для доступа к Telegram Bot API.
    # @details Получается от официального бота @BotFather в Telegram.
    # Тип `SecretStr` используется для того, чтобы значение этого поля
    # автоматически скрывалось при выводе объекта `Settings` в лог или консоль,
    # предотвращая случайную утечку секрета.
    # @see https://core.telegram.org/bots#6-botfather

    OPENROUTER_API_KEY: SecretStr
    ## @var OPENROUTER_API_KEY
    # @brief Секретный API ключ для сервиса-агрегатора OpenRouter.
    # @details Используется для аутентификации запросов к моделям ИИ, доступным
    # через OpenRouter. Это позволяет легко переключаться между моделями
    # и обходить гео-ограничения некоторых провайдеров.
    # @see https://openrouter.ai/keys
    
    model_config = SettingsConfigDict(
        env_file="../.env", 
        extra="ignore",
        env_prefix=""  
    )
    ## @var model_config
    # @brief Внутренняя конфигурация для Pydantic-модели `Settings`.
    # @details Определяет, как Pydantic должен загружать и обрабатывать переменные.
    # - <b>env_file:</b> Путь к файлу с переменными окружения.
    #   @note Путь `../.env` предполагает, что скрипт, использующий этот конфиг,
    #         запускается из дочерней директории (например, `src/`). Для запуска
    #         из корня проекта следует использовать `'.env'`.
    # - <b>extra:</b> Значение `'ignore'` указывает, что лишние переменные в `.env`
    #   файле (не описанные в классе `Settings`) будут проигнорированы, а не вызовут ошибку.
    # - <b>env_prefix:</b> Пустой префикс (`""`) означает, что переменные в `.env` файле
    #   должны иметь то же имя, что и поля класса (например, `BOT_TOKEN`, а не `MYAPP_BOT_TOKEN`).

##
# @var settings
# @brief Глобальный, единый экземпляр (синглтон) класса настроек `Settings`.
# @details Этот объект создается один раз при импорте модуля и затем используется
# во всем приложении для получения доступа к конфигурационным параметрам.
# Например: `from core.config import settings; bot_token = settings.BOT_TOKEN`.
# @warning Не следует выводить этот объект в лог целиком, несмотря на защиту
# `SecretStr`, чтобы избежать потенциальных утечек в будущем при добавлении
# незащищенных полей.
settings = Settings()