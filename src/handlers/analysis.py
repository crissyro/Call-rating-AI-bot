import logging

from aiogram import Router, F, types
from aiogram.filters import CommandStart

from services.analyzer import analyzer

logger = logging.getLogger("call_assessment_bot")
analysis_router = Router()

@analysis_router.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_text = (
        f"üëã **–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!**\n\n"
        "–Ø ‚Äî –ò–ò-–∞–≥–µ–Ω—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∑–≤–æ–Ω–∫–æ–≤. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ —Ç–æ–Ω –∏ –¥–∞–º –¥–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."
    )
    await message.answer(welcome_text, parse_mode="Markdown")

@analysis_router.message(F.text)
async def handle_text_message(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""

    if not message.text or len(message.text.split()) < 10:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Å–ª–æ–≤.")
        return

    processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 40 —Å–µ–∫—É–Ω–¥.")
    logger.info(f"Started analysis for user {message.from_user.id}. Text length: {len(message.text)}")

    analysis_result = await analyzer.analyze_call(message.text)
    
    await processing_msg.edit_text(analysis_result, parse_mode="Markdown")
    
    logger.info(f"Finished analysis for user {message.from_user.id}")
    await message.answer("–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞!")

@analysis_router.message(F.content_type.is_not(types.ContentType.TEXT))
async def handle_unsupported_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è —Ç–µ–∫—Å—Ç–æ–º."""
    await message.answer("‚ùå –Ø —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")